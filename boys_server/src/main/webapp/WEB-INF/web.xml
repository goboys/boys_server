<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" version="3.0">
	
	<welcome-file-list>
		<welcome-file>index.jsp</welcome-file>
	</welcome-file-list>
	<!-- 业务层和持久层的Spring配置文件,这些配置文件被父Spring容器所使用
		多个配置文件使用逗号分隔,ContextLoaderListener是一个ServletContextListener,
		它通过contextConfigLocation参数所指定的Spring配置文件启动 “业务层” 的Spring容器。
	 -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:/conf/springconf/applicationContext.xml</param-value>
	</context-param>
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	
	<!-- 启动默认加载/WEB-INF/springMvc-servlet.xml(即<servlet-Name>-servlet.xml)的spring配置文件，
	     启动web层的spring容器；一个web.xml可以配置多个DispatcherServlet,让每个DispatcherServlet处理不同
	     的请求
	   DispatcherServlet类中initStrategies()方法将在WebApplicationContext初始化后自动执行，此时上下文中的Bean已经初始化
	   完毕。该方法的工作是通过放射机制查找并装配Spring容器中用户显式自定义的组件Bean，如果找不到再装配默认的组件实例。
	     
	      -->
	<servlet>
		<servlet-name>springMvc</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<!--  代码显式指定Web层Spring配置文件-->
		
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath:/conf/springconf/springMvc-servlet.xml</param-value>
		</init-param>
		
		<load-on-startup>1</load-on-startup>
	</servlet>

	<servlet-mapping>
		<servlet-name>springMvc</servlet-name>
		<url-pattern>*.do</url-pattern>
	</servlet-mapping>
	
</web-app>